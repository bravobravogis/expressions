## Description: Label expression builds data dictionary with arcpy.da.SearchCursor
## Label Type:  Multiple analytes, multiple depths     
## Notes:       Is NOT based upon EQuIS flat file analytical results spreadsheet
##              Does NOT include values for field duplicates
##              Does NOT include BOLD exceedance values

label_dict = {}  # preliminary empty data dictionary
def FindLabel ( [loc_id] ):  # field to be joined to data dictionary

    global label_dict  # define global variable
    label_source = r"G:\37702_CTS_Printex\Global\GIS\Data\Tables\2018_04\CTS_Printex_GW_Results_2018_0416.xlsx\GIS$"  # provide location of analytical results spreadsheet
    label_fields = ["loc_id", "start_depth", "end_depth", "tce_conc", "cdce_conc"]  # relevant fields from analytical results spreadsheet

    if not any(label_dict):  # populates data dictionary only if empty
        with arcpy.da.SearchCursor(label_source, label_fields) as label_table:
            for label_row in label_table:
                label_id = label_row[0]  # assigns the key to data dictionary
                if label_id not in label_dict:
                    label_dict[label_id] = [label_row[1:]]  # assigns the list of values to the key
                else:
                    label_dict[label_id] += [label_row[1:]]  # appends the list of values to the key

    sample_id = [loc_id]  # field to be labeled
    col_1, col_2, col_3 = "DEPTH", "TCE", "cDCE"  # label column headers
    expression = ""  # preliminary empty label expression
    ns = "NOT SAMPLED (NS)"  # not sampled label

    if sample_id in label_dict.keys():  # determines whether the feature is in the data dictionary
        sorted_label = sorted(label_dict[sample_id])  # sorts the data dictionary values for key based on start depth
        header_text = "<BOL>{0:<}</BOL>\r\n<UND>{1:<12}{2:<14}{3:<6}</UND>".format(sample_id, col_1, col_2, col_3)  # assembles the label header
        for row in sorted_label:
            expression += "\r\n{0:<}-{1:<7}{2:<14}{3:<}".format(row[0], row[1], row[2], row[3])  # builds label from data dictionary values
    else:
        header_text = "<BOL>{0:<}</BOL>\r\n<UND>{1:<12}{2:<14}{3:<6}</UND>".format(sample_id, col_1, col_2, col_3)  # assembles the label header
        expression = "\r\n{0}".format(ns)  # adds not sampled message
    
    return header_text + expression
